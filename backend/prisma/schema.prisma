// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Category {
  Arithmetic
  Algebra
  Geometry
  Mixed
}

enum AnswerStatus {
  Correct
  Incorrect
  Skipped
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  email     String    @unique
  createdAt DateTime  @default(now())
  rating_deviation Int @default(350)
  volatility Decimal       @default(0.06)
  ratings   Rating[]
  stats     Json      @default("{\"highestWinStreaks\": {}, \"winLossRecords\": {}}")
  gamesAsPlayerA GameHistory[] @relation("PlayerAGames")
  gamesAsPlayerB GameHistory[] @relation("PlayerBGames")
}
model Rating {
  id        Int      @id @default(autoincrement())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category  Category
  rating    Int      @default(1500)
  gamesPlayed Int   @default(0)
  lastUpdated DateTime @default(now())
  @@unique([userId, category])
}
model Question {
  id                  Int       @id @default(autoincrement())
  questionText        String
  category            Category
  ratingBucket        Int
  correctAnswer       String
  stepByStepSolution  String?
  imageUrl            String?
  
  moves               GameMove[]

  @@index([category, ratingBucket])
}

model GameHistory {
  id             Int       @id @default(autoincrement())
  createdAt      DateTime  @default(now())
  category       Category
  timeControl    String    
  playerAId              String?
  playerA                User?      @relation("PlayerAGames", fields: [playerAId], references: [id], onDelete: SetNull)
  playerARatingBefore    Int
  playerARatingAfter     Int

  playerBId              String?
  playerB                User?      @relation("PlayerBGames", fields: [playerBId], references: [id], onDelete: SetNull)
  playerBRatingBefore    Int
  playerBRatingAfter     Int
  winnerId     String?

  moves        GameMove[]
}

model GameMove {
  id           Int          @id @default(autoincrement())
  
  gameHistoryId Int
  gameHistory  GameHistory  @relation(fields: [gameHistoryId], references: [id], onDelete: Cascade)

  questionId   Int
  question     Question     @relation(fields: [questionId], references: [id], onDelete: Cascade )
  playerId     String
  
  status       AnswerStatus 
  pointsGained Int          @default(0)
  answerGiven  String?      
  timeTakenMs  Int         
}